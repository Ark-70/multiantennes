%% clean

clc; clear all; close all;

M =  5; % nb capteurs
N = 500; % lonngueur d'echantillons
varv = 0.3; % variance bruit
vars = 1; % variance du signal d'interet
teta0deg = 40; % degres
teta0 = teta0deg*pi/180; % rad
K = 1; % Juste une source

a1 = (0:M-1).';
a1 = exp(-1j*pi.*a1*sin(teta0));
A = [a1];

% s = randn(M, 1); Ca c'est en reel

sn = sqrt(vars/2)*(randn(K,N) + 1i*randn(K,N)); % loi gaussienne imaginaire

vn = sqrt(varv/2)*(randn(M,N) + 1i*randn(M,N)); % vu que le bruit = bruit thermique, autant de vecteur de bruit que de capteurs

Y = A*sn+vn; % ce qui se balade sur le canal/à l'entrée des capteurs

R_chap = zeros(M);
for i_ech = 1:N
    yn = Y(:,i_ech);
    Rn = yn*yn'; % la matrice R mais pourrie vu que c'est que pour un instant donné
    R_chap = R_chap + Rn;
end
R_chap = R_chap/N; % notre vrai R_chap estimé en tant que moyenne

% maintenant qu'on a notre R^ on peut essayer de calculer P^
% on va tatonner pour tater teta, jusqu'à tomber sur un endroit où y a une source
% même si on taffe sur que 5 trucs reçus, avec ces 5 là, + notre filtrage spatial, on arrive à savoir d'où vient quoi

% teta forcement entre -pi/2 et pi/2
P_chaps = [];
yn = Y(:,1);
inter_theta = -pi/2:0.001:pi/2;
for teta_tmp = inter_theta 
    
    a_tmp = exp(-1j*pi.*a1*sin(teta_tmp));
    
    P_chap = 1/(a_tmp'*inv(R_chap)*a_tmp);
    P_chaps = [P_chaps P_chap];
end

plot(inter_theta*180/pi, abs(P_chaps));
